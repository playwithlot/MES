#ifndef __COMMON_H
#define __COMMON_H

#include <rtthread.h>
#include <rtdevice.h>
#include <board.h>
#include "rtconfig.h"
#include "dev_flash.h"
#include "rtconfig.h"
#include "sockets.h"
#include "CRC16.h"
#include "rtthread.h"
#include "network_handle.h"
#include "iot_version.h"
#include <rtthread.h>


#define CCM_RAM_BGING 0x10000000 // 64k的CCM内存，用来当线程栈
#define CCM_RAM_END (CCM_RAM_BGING + 64 * 1024)

////动态链表内存池
#define LINE_MEMPOOL_SIZE (20 * 1024)
#define LINE_MEMPOOL_ADDR (CCM_RAM_BGING)

//monitor thread param
#define MONITOR_THREAD_STACK_ADDR (LINE_MEMPOOL_SIZE + LINE_MEMPOOL_ADDR + 1024)
#define MONITOR_THREAD_STACK_SIZE 1024
#define MONITOR_THREAD_PRIORITY   28
#define MONITOR_THREAD_TIME_SLINCE  20

//telnet thread
#define TELNET_THREAD_STACK_ADDR (MONITOR_THREAD_STACK_ADDR + MONITOR_THREAD_STACK_SIZE)
#define TELNET_THREAD_STACK_SIZE 2048
#define TELNET_THREAD_PRO 29

//tcp recv thread param
#define TCP_RECV_THREAD_STACK_BASE   (TELNET_THREAD_STACK_ADDR + TELNET_THREAD_STACK_SIZE)
#define TCP_RECV_THREAD_STACK_SIZE   4096
#define TCP_RECV_THREAD_PRIORITY     15
#define TCP_RECV_THREAD_TIME_SLINCE  20

//tcp send thread param
#define TCP_SEND_THREAD_STACK_BASE   (TCP_RECV_THREAD_STACK_BASE + TCP_RECV_THREAD_STACK_SIZE)
#define TCP_SEND_THREAD_STACK_SIZE   4096
#define TCP_SEND_THREAD_PRIORITY     12
#define TCP_SEND_THREAD_TIME_SLINCE  20


//local sends thread
#define LOCAL_HANDLE_THREAD_STACK_BASE  (TCP_SEND_THREAD_STACK_BASE + TCP_SEND_THREAD_STACK_SIZE)
#define LOCAL_HANDLE_THREAD_STACK_SIZE  4096
#define LOCAL_HANDLE_THREAD_PRIORITY    12
#define LOCAL_HANDLE_THREAD_TIME_SLINCE 30


//local recv thread
#define LOCAL_RECV_THREAD_STACK_BASE  (LOCAL_HANDLE_THREAD_STACK_BASE + LOCAL_HANDLE_THREAD_STACK_SIZE)
#define LOCAL_RECV_THREAD_STACK_SIZE  4096
#define LOCAL_RECV_THREAD_PRIORITY    12

//multicast communication handle thread
#define MULTICAST_CMM_THREAD_STACK_BASE  (LOCAL_RECV_THREAD_STACK_BASE + LOCAL_RECV_THREAD_STACK_SIZE)
#define MULTICAST_CMM_THREAD_STACK_SIZE  2048
#define MULTICAST_CMM_THREAD_PRIORITY    12
#define MULTICAST_CMM_THREAD_TIME_SLINCE 20

//can sends thread
#define CAN_SEND_THREAD_STACK_BASE  (MULTICAST_CMM_THREAD_STACK_BASE + MULTICAST_CMM_THREAD_STACK_SIZE)
#define CAN_SEND_THREAD_STACK_SIZE  1024
#define CAN_SEND_THREAD_PRIORITY    11
#define CAN_SEND_THREAD_TIME_SLINCE 20

//can recv thread
#define CAN_RECV_THREAD_STACK_BASE  (CAN_SEND_THREAD_STACK_BASE + CAN_SEND_THREAD_STACK_SIZE)
#define CAN_RECV_THREAD_STACK_SIZE  1024
#define CAN_RECV_THREAD_PRIORITY    11
#define CAN_RECV_THREAD_TIME_SLINCE 20


//tcp log thread
#define TCP_LOG_THREAD_STACK_ADDR (CAN_RECV_THREAD_STACK_BASE + CAN_RECV_THREAD_STACK_SIZE)
#define TCP_LOG_THREAD_STACK_SIZE 3072
#define TCP_LOG_THREAD_PRO 25

//scanner send thread
#define SCANNER_SEND_THREAD_STACK_ADDR (TCP_LOG_THREAD_STACK_ADDR + TCP_LOG_THREAD_STACK_SIZE)
#define SCANNER_SEND_THREAD_STACK_SIZE 1024
#define SCANNER_SEND_THREAD_PRIORITY 19

//scanner recv thread
#define SCANNER_RECV_THREAD_STACK_ADDR (SCANNER_SEND_THREAD_STACK_ADDR + SCANNER_SEND_THREAD_STACK_SIZE)
#define SCANNER_RECV_THREAD_STACK_SIZE 1024
#define SCANNER_RECV_THREAD_PRIORITY 10


////rfid send thread
//#define RFID_SEND_THREAD_STACK_BASE  (SCANNER_RECV_THREAD_STACK_ADDR + SCANNER_RECV_THREAD_STACK_SIZE)
//#define RFID_SEND_THREAD_STACK_SIZE  1024
//#define RFID_SEND_THREAD_PRIORITY    11
//#define RFID_SEND_THREAD_TIME_SLINCE  20

////rfid recv thread
//#define RFID_RECV_THREAD_STACK_BASE  (RFID_SEND_THREAD_STACK_BASE + RFID_SEND_THREAD_STACK_SIZE)
//#define RFID_RECV_THREAD_STACK_SIZE  1024
//#define RFID_RECV_THREAD_PRIORITY    11
//#define RFID_RECV_THREAD_TIME_SLINCE  20


//日志缓存
#define LOG_BUF_SIZE (2 * 1024)
#define LOG_BUF_ADDR (SCANNER_RECV_THREAD_STACK_ADDR + SCANNER_RECV_THREAD_STACK_SIZE + 1024)

// ulog 异步缓存
#define ULOG_ASYNC_OUTPUT_BUF_ADDR (LOG_BUF_ADDR + LOG_BUF_SIZE)

#ifndef ULOG_ASYNC_OUTPUT_STORE_LINES
#define ULOG_ASYNC_OUTPUT_STORE_LINES (ULOG_ASYNC_OUTPUT_BUF_SIZE * 3 / 2 / ULOG_LINE_BUF_SIZE)
#endif

#define ULOG_ASYNC_OUTPUT_BLK_SET_ADDR (ULOG_ASYNC_OUTPUT_BUF_ADDR + ULOG_ASYNC_OUTPUT_BUF_SIZE)
#define ULOG_ASYNC_OUTPUT_BLK_SET_SIZE (12 * ULOG_ASYNC_OUTPUT_STORE_LINES)
#define CCM_RAM_USE_END (ULOG_ASYNC_OUTPUT_BUF_ADDR + ULOG_ASYNC_OUTPUT_BUF_SIZE)

#if (CCM_RAM_END < CCM_RAM_USE_END)
#error "空间超过CCM范围"
#endif

//index level
#define NET_GET_INDEX_LEV3(index, cmd) \
{\
	index = (cmd & 0x00FF0000) >> 16;\
}


//netwoek command: read command
#define NET_CMD_RD_VERSION               (0x00000101)
#define NET_CMD_RD_BOARD_RESRC_PARAM     (0x00000201)
#define NET_CMD_RD_BOARD_POS_PARAM       (0x00000301)
#define NET_CMD_RD_BOARD_FSW_PARAM       (0x00000401)
#define NET_CMD_RD_BOARD_OPT_STATUS      (0x00000501)

//netwoek command: write command
#define NET_CMD_RW_BOARD_RESRC_PARAM     (0x00000102)
#define NET_CMD_RW_BOARD_POS_PARAM       (0x00000202)
#define NET_CMD_RW_BOARD_FSW_PARAM       (0x00000302)

#define NET_CMD_RW_UPDATE_RESRC_PARAM    (0x00000402)
#define NET_CMD_RW_UPDATE_POS_PARAM      (0x00000502)
#define NET_CMD_RW_UPDATE_FSW_RARAM      (0x00000602)
#define NET_CMD_RW_RESET_RESRC_PARAM     (0x00000702)
#define NET_CMD_RW_RESET_POS_PARAM       (0x00000802)
#define NET_CMD_RW_RESET_FSW_PARAM       (0x00000902)


//network command: update command 
#define NET_CMD_TRANS_FIRMWARE_INFO      (0x00000103)
#define NET_CMD_TRANS_FIRMWARE_DATA      (0x00000203)
#define NET_CMD_TRANS_FIRMWARE_VERIFY    (0x00000303)

//network command: update command 
#define NET_CMD_SYSTEM_TICK              (0x00000000)



//network command: motor debug command 
#define NET_CMD_MT_EN                    (0x00000104)
#define NET_CMD_MT_BRAK                  (0x00000204)
#define NET_CMD_MT_RESET                 (0x00000304)
#define NET_CMD_MT_RUNING                (0x00000404)


//network command: cycle command 
#define NET_CMD_DEV_RESET             (0x00000105) 
#define NET_CMD_DEV_STOP              (0x00000605)  
#define NET_CMD_MOVE_CACHE_REG        (0x00000205)  
#define NET_CMD_PUSH_SHELF            (0x00000305)  
#define NET_CMD_POP_SHELF             (0x00000405)  
#define NET_CMD_MOVE_SHELF            (0x00000505) 
  
//network command: multicast command
#define NET_CMD_RD_GET_IOT_INFO		  (0x00000107)
#define NET_CMD_RD_SET_IOT_INFO       (0x00000207)

//lower machin report requestion
#define REQ_BASKET_START_TEST		(0x0107)
#define REQ_BASKET_PASUSE_TEST		(0x0207)

#define REQ_EMERGY_START_TEST		(0x0307)
#define REQ_EMERGY_PASUSE_TEST		(0x0407)

#define REQ_BASKET_UPDATE_STATUS	(0x0507)
#define REQ_BASKET_INSER_SAMPLE		(0x0607)
#define REQ_BASKET_REMOVE_SAMPLE	(0x0707)

#define REQ_EMERGY_INSER_SAMPLE		(0x0807)
#define REQ_EMERGY_REMOVE_SAMPLE	(0x0907)

typedef enum
{
	CAN_LOCAL_ADDR = 8, //23,  //local device address 
	CAN_ADDR_SAMPLE_PLTAFROM = 1,				
	CAN_ADDR_SAMPLE_STATUS,	
	CAN_ADDR_EMER_TRACK,	
	CAN_ADDR_NORMAL_TRACK,
	CAN_ADDR_RECOVERY_TRACK,
	LOCAL_NET_ADDR = 0xFE,


} DEV_SUBMOUDLE_ADDR;



typedef enum
{
	PACK_TYPE_CMD = 0x01,       //network to can
	PACK_TYPE_ACK = 0x02,       //bidirectional 
	PACK_TYPE_RESULT = 0x03,    //can to network
	PACK_TYPE_DATA = 0x04,      //can to net work
	PACK_TYPE_REPORT = 0x05,    //can to net work
	PACK_TYPE_HEARTBEAT =0x06,  //can to net work
	PACK_TYPE_UPGRATE = 7       //network to can

} COMM_FRAME_TYPES;



typedef enum
{
	//define for motor
	M1_MT_BASKET1_LOCK_MT = 1,
	M1_MT_BASKET2_LOCK_MT,
	M1_MT_BASKET3_LOCK_MT,
	M1_MT_CAR_MT_Y,
	M1_MT_CAR_MT_X,
	M1_MT_CAR_MT_Z,
	M1_MT_CAR_SHITF_FORK_MT,
	M1_MT_PUSH_SHELF_MACHINE_PUSHROD_MT,
	M1_MT_PUSH_SHELF_MACHINE_CHAGE_TRACK_MT,
	
	//define for senser
	M1_SEN_CAR_CODE_DISH_OPTICAL_Y = 0x01,
	M1_M1_SEN_CAR_IN_PLACE_OPTICAL_X,
	M1_SEN_CAR_IN_PLACE_OPTICAL_Z,
	M1_SEN_CAR_SHIFT_FORK_IN_PLACE_OPTICAL,
	M1_SEN_CAR_TRACK_SIDE_SAMPLE_SHELF_IN_PLACE_OPTICAL,
	M1_SEN_CAR_BASKET_SIDE_SAMPLE_SHELF_IN_PLACE_OPTICAL,
	M1_SEN_CACHE_REG_SAMPLE_SHELF_IN_PLACE_OPTICAL,
	M1_SEN_BASKET1_LOCK_MT_IN_PLACE_OPTICAL,
	M1_SEN_BASKET2_LOCK_MT_IN_PLACE_OPTICAL,
	M1_SEN_BASKET3_LOCK_MT_IN_PLACE_OPTICAL, //10
	M1_SEN_PUSH_SHELF_MACHINE_EMER_PLACE_OPTICAL,
	M1_SEN_PUSH_SHELF_MACHINE_PUSHROD_IN_PLACE_OPTICAL,
	M1_M1_SEN_CAR_RESET_OPTICAL_Y,
	M1_SEN_CAR_RESET_OPTICAL_X,
	M1_SEN_CAR_RESET_OPTICAL_Z,
	M1_SEN_CAR_SHITF_FORK_RESET_OPTICAL,
	M1_SEN_BASKET1_LOCK_MT_RESET_IN_PLACE_OPTICAL,
	M1_SEN_BASKET2_LOCK_MT_RESET_IN_PLACE_OPTICAL,
	M1_SEN_BASKET3_LOCK_MT_RESET_IN_PLACE_OPTICAL,
	M1_M1_SEN_PUSH_SHELF_MORMAL_POSITION_OPTICAL,   //20
	M1_SEN_PUSH_SHELF_MACHINE_PUSHROD_RESET_OPTICAL,
	M1_SEN_ALL_OPTICAL = 0xFF,
	
	
} MODULE01_RESRC;


typedef enum
{
	M2_MT_BASKET1_LOCK_MT = 1,
	M2_MT_BASKET2_LOCK_MT,
	M2_MT_BASKET3_LOCK_MT,
	M2_MT_CAR_MT_Y,
	M2_MT_CAR_MT_X,
	M2_MT_CAR_MT_Z,
	M2_MT_CAR_SHITF_FORK_MT,
	M2_MT_PUSH_SHELF_MACHINE_PUSHROD_MT,
	M2_MT_PUSH_SHELF_MACHINE_CHAGE_TRACK_MT,

	
	M2_SEN_BASKET1_SAMPLE_SHELF_CHECK_SEN = 0x01,
	M2_SEN_BASKET2_SAMPLE_SHELF_CHECK_SEN,
	M2_SEN_BASKET3_SAMPLE_SHELF_CHECK_SEN,
	
	M2_SEN_EMER_REG_SAMPLE_SHELF_CHECK_SEN = 0x01,
	
	M2_SEN_BASKET1_CHECK_SEN = 0x01,
	M2_SEN_BASKET2_CHECK_SEN,
	M2_SEN_BASKET3_CHECK_SEN,

	M2_BUTTON_BASKET1_STARTUP_CHECK_BT = 0x01,
	M2_BUTTON_BASKET2_STARTUP_CHECK_BT,
	M2_BUTTON_BASKET3_STARTUP_CHECK_BT,
	M2_BUTTON_EMER_REG1_STARTUP_CHECK_BT, 
	M2_BUTTON_EMER_REG2_STARTUP_CHECK_BT,
	
	M2_BUTTON_BASKET1_INDECATE_LED = 0x01,
	M2_BUTTON_BASKET2_INDECATE_LED,
	M2_BUTTON_BASKET3_INDECATE_LED,
	
	M2_BUTTON_EMER_REG_INDECATE_LED = 0x01
	
	
} MODULE02_RESRC;


typedef enum
{
	//define for motor
	M3_MT_NORMAL_TRACK_PREV_SEG_BELT_MT = 1,
	M3_MT_EMER_TRACK_ENTRY_OBSTRUCT_SLICE_MT,
	M3_MT_EMER_TRACK_CARD_SLOT_FLEX_MT,
	M3_MT_EMER_TRACK_EXPORT_OBSTRUCT_SLICE_MT,
	M3_MT_EMER_TRACK_CARD_SLOT_POS_MT,
	M3_MT_NORMAL_TRACK_BELT_MT,
	
	
	//define for senser
	M3_SEN_MEMR_TRACK_CARD_SLOT_POS_OPTICAL = 0x01,
	M3_SEN_MEMR_TRACK_ENTRY_SAMPLE_SHELF_CHECK_OPTICAL,
	M3_SEN_MEMR_TRACK_ENTRY_STOP_OPTICAL,
	M3_SEN_MEMR_TRACK_ADD_SAMPLE_POS_SAMPLE_CHECK_OPTICAL,
	M3_SEN_MEMR_TRACK_CARD_SLOT_LIMIT_POS_OPTICAL,
	M3_SEN_MEMR_TRACK_CARD_SLOT_EXIT_POS_OPTICAL,
	M3_SEN_MEMR_TRACK_EXPORT_SAMPLE_SHELF_CHECK_OPTICAL,
	M3_SEN_MEMR_TRACK_EXPORT_STOP_OPTICAL,
	M3_SEN_MEMR_TRACK_ENTRY_RELEASE_OPTICAL,
	M3_SEN_MEMR_TRACK_CARD_SLOT_RESET_OPTICAL,
	M3_SEN_MEMR_TRACK_CARD_SLOT_RETURN_OPTICAL,
	M3_SEN_MEMR_TRACK_EXPORT_RELEASE_OPTICAL,
	M3_SEN_MEMR_TRACK_ALL_OPTICAL,
	
	
	
} MODULE03_RESRC;

typedef enum
{
	//define for motor
	M4_MT_NORMAL_TRACK_BACK_SEG_BELT_MT = 1,
	M4_MT_EMER_TRACK_EXPORT_OBSTRUCT_SLICE_MT,
	M4_MT_EMER_TRACK_PREV_SEG_CARD_SLOT_FLEX_MT,
	M4_MT_EMER_TRACK_BACK_SEG_CARD_SLOT_FLEX_MT,
	M4_MT_EMER_TRACK_PREV_SEG_CARD_SLOT_POS_MT,
	M4_MT_EMER_TRACK_BACK_SEG_CARD_SLOT_POS_MT,
	
	
	//define for senser
	M4_SEN_MORMAL_TRACK_RREV_SEG_CARD_SLOT_POS_OPTICAL = 0x01,
	M4_SEN_MORMAL_TRACK_BACK_SEG_CARD_SLOT_POS_OPTICAL,
	M4_SEN_MORMAL_TRACK_ADD_SAMPLE_POS_SAMPLE_CHECK_OPTICAL,
	M4_SEN_MORMAL_TRACK_PREV_SEG_CARD_SLOT_EXIT_POS_OPTICAL,
	M4_SEN_MORMAL_TRACK_BACK_SEG_CARD_SLOT_EXIT_POS_OPTICAL,
	M4_SEN_MORMAL_TRACK_EXPORT_STOP_OPTICAL,
	M4_SEN_MORMAL_TRACK_EXPORT_SAMPLE_SHELF_CHECK_OPTICAL,
	M4_SEN_MORMAL_TRACK_RREV_SEG_CARD_SLOT_RESET_OPTICAL,
	M4_SEN_MORMAL_TRACK_RREV_SEG_CARD_SLOT_RETURN_OPTICAL,
	M4_SEN_MORMAL_TRACK_BACK_SEG_CARD_SLOT_RESET_OPTICAL,
	M4_SEN_MORMAL_TRACK_BACK_SEG_CARD_SLOT_RETURN_OPTICAL,
	M4_SEN_MORMAL_TRACK_BACK_EXPORT_RELEASE_OPTICAL,
	M4_SEN_MORMAL_TRACK_ALL_OPTIAL

} MODULE04_RESRC;


typedef enum
{
	//define for motor
	M5_MT_CHANGE_TRACK_OBSTRUCT_SLICE_DRV_MT = 3,
	M5_MT_REC_TRACK_EXPORT_OBSTRUCT_SLICE_MT,
	M5_MT_CHANGE_TRACK_POS_DRV_MT,
	M5_MT_REC_TRACK_BELT_MT,

	//define for senser
	M5_SEN_REC_TRACK_EXPORT_STOP_OPTICAL = 0x01,
	M5_SEN_REC_TRACK_EXPORT_SAMPLE_SHELF_CHECK_OPTICAL,
	M5_SEN_CHANGE_TRACK_NORMAL_POS_OPTICAL,
	M5_SEN_CHANGE_TRACK_RECYC_POS_OPTICAL,
	M5_SEN_CHANGE_TRACK_STOP_POS_OPTICAL,
	M5_SEN_REC_TRACK_EXPORT_RELEASE_OPTICAL,
	M5_SEN_CHANGE_TRACK_EMER_POS_OPTICAL,
	M5_SEN_CHANGE_TRACK_RELEASE_POS_OPTICAL,
	M5_SEN_REC_TRACK_ALL_OPTICAL,


} MODULE05_RESRC;


#pragma pack(1)
//A5 A1 1A 5A   43 00   00 00   03   00   FE   07 01 00 00   FE 26 00 1B 00 16 51 30 34 35 34 39 38 43 4C 49 41 36 38 2D 34 38 30 00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 00 00 00 C0 A8 00 64 C0 A8 00 01 FF FF FF 00 00 5B A0 00 6A 19 34 21 98 21 C0 A8 00 67 99 FE 5A 1A A1 A5 
//A5 A1 1A 5A   43 00   11 00   03   00   FE   07 01 00 00   FE 26 00 1B 00 16 51 30 34 35 34 39 38 43 4C 49 41 36 38 2D 34 38 30 00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 00 00 00 C0 A8 00 64 C0 A8 00 01 FF FF FF 00 00 5B A0 00 6A 19 34 21 98 21 C0 A8 00 67 AA E0 5A 1A A1 A5 
typedef struct
{
    uint32_t head;
    uint16_t len;
    uint16_t serial;
    uint8_t type; 
    uint8_t src_addr;
    uint8_t dest_addr;
    uint32_t cmd;
    uint8_t *buf;
	uint16_t crc;
	uint32_t tail;
	
} network_pack_t;


typedef struct
{
	uint16_t len;
	uint16_t serial;
	uint8_t type; 
	uint8_t src_addr;
	uint8_t dest_addr;
	uint32_t cmd;
	uint8_t *buf;
	
} local_pack_t;






typedef struct
{
	uint8_t cmd;
	uint8_t type;
	uint8_t mode;
	
} scanner_frame_t;

#pragma pack()



extern rt_mq_t network_command_queue;
extern rt_mq_t local_rsp_queue;
extern rt_mq_t can_report_queue;
extern rt_mq_t can_response_queue;
extern rt_mutex_t can_rsp_mux; 
extern rt_mutex_t net_rsp_mux; 
extern rt_mutex_t multicast_rsp_mux; 


//extern uint8_t local_send_response(local_pack_t *pack);
extern uint8_t local_transmit_response(local_pack_t *pack, uint8_t *buf, uint8_t len, uint8_t types);
extern uint8_t udp_transmit_response(local_pack_t *pack, uint8_t *buf, uint8_t len, uint8_t types);
extern rt_err_t local_send_ctrl_frame(uint16_t cmd, uint8_t *buf, uint8_t dest_addr, uint8_t wait_rsp_falsg);
extern rt_err_t local_wait_rsp_frame(uint16_t cmd, uint8_t *buf, uint8_t dest_addr, uint8_t wait_rsp_falsg);

extern void get_timestamp(uint8_t *h, uint8_t *min, uint8_t *sec, uint16_t *ms);

#endif

